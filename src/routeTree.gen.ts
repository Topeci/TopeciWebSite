/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as NewsletterRouteImport } from './routes/newsletter'
import { Route as HomeRouteImport } from './routes/_home'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HomeLivresRouteImport } from './routes/_home/livres'
import { Route as HomeContactRouteImport } from './routes/_home/contact'
import { Route as HomeBoutiqueRouteImport } from './routes/_home/boutique'
import { Route as HomeAProposRouteImport } from './routes/_home/a-propos'

const NewsletterRoute = NewsletterRouteImport.update({
  id: '/newsletter',
  path: '/newsletter',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/_home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeLivresRoute = HomeLivresRouteImport.update({
  id: '/livres',
  path: '/livres',
  getParentRoute: () => HomeRoute,
} as any)
const HomeContactRoute = HomeContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => HomeRoute,
} as any)
const HomeBoutiqueRoute = HomeBoutiqueRouteImport.update({
  id: '/boutique',
  path: '/boutique',
  getParentRoute: () => HomeRoute,
} as any)
const HomeAProposRoute = HomeAProposRouteImport.update({
  id: '/a-propos',
  path: '/a-propos',
  getParentRoute: () => HomeRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/newsletter': typeof NewsletterRoute
  '/a-propos': typeof HomeAProposRoute
  '/boutique': typeof HomeBoutiqueRoute
  '/contact': typeof HomeContactRoute
  '/livres': typeof HomeLivresRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/newsletter': typeof NewsletterRoute
  '/a-propos': typeof HomeAProposRoute
  '/boutique': typeof HomeBoutiqueRoute
  '/contact': typeof HomeContactRoute
  '/livres': typeof HomeLivresRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_home': typeof HomeRouteWithChildren
  '/newsletter': typeof NewsletterRoute
  '/_home/a-propos': typeof HomeAProposRoute
  '/_home/boutique': typeof HomeBoutiqueRoute
  '/_home/contact': typeof HomeContactRoute
  '/_home/livres': typeof HomeLivresRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/newsletter'
    | '/a-propos'
    | '/boutique'
    | '/contact'
    | '/livres'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/newsletter' | '/a-propos' | '/boutique' | '/contact' | '/livres'
  id:
    | '__root__'
    | '/'
    | '/_home'
    | '/newsletter'
    | '/_home/a-propos'
    | '/_home/boutique'
    | '/_home/contact'
    | '/_home/livres'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRouteWithChildren
  NewsletterRoute: typeof NewsletterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/newsletter': {
      id: '/newsletter'
      path: '/newsletter'
      fullPath: '/newsletter'
      preLoaderRoute: typeof NewsletterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_home': {
      id: '/_home'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_home/livres': {
      id: '/_home/livres'
      path: '/livres'
      fullPath: '/livres'
      preLoaderRoute: typeof HomeLivresRouteImport
      parentRoute: typeof HomeRoute
    }
    '/_home/contact': {
      id: '/_home/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof HomeContactRouteImport
      parentRoute: typeof HomeRoute
    }
    '/_home/boutique': {
      id: '/_home/boutique'
      path: '/boutique'
      fullPath: '/boutique'
      preLoaderRoute: typeof HomeBoutiqueRouteImport
      parentRoute: typeof HomeRoute
    }
    '/_home/a-propos': {
      id: '/_home/a-propos'
      path: '/a-propos'
      fullPath: '/a-propos'
      preLoaderRoute: typeof HomeAProposRouteImport
      parentRoute: typeof HomeRoute
    }
  }
}

interface HomeRouteChildren {
  HomeAProposRoute: typeof HomeAProposRoute
  HomeBoutiqueRoute: typeof HomeBoutiqueRoute
  HomeContactRoute: typeof HomeContactRoute
  HomeLivresRoute: typeof HomeLivresRoute
}

const HomeRouteChildren: HomeRouteChildren = {
  HomeAProposRoute: HomeAProposRoute,
  HomeBoutiqueRoute: HomeBoutiqueRoute,
  HomeContactRoute: HomeContactRoute,
  HomeLivresRoute: HomeLivresRoute,
}

const HomeRouteWithChildren = HomeRoute._addFileChildren(HomeRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRouteWithChildren,
  NewsletterRoute: NewsletterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
